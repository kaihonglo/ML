import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

%matplotlib inline

# scikit train_test_split function
X_train, X_test, y_train, y_test = train_test_split(
 X, y, test_size = 0.30, random_state = 0
)

# Reshape for 2D array (if need)
X_train = train.reshape(-1, 1)
X_test = X_test.reshape(-1, 1)
y_train = y_train.reshape(-1, 1)
y_test = y_test.reshape(-1, 1)

# Train Linear Regression models
linreg = LinearRegression().fit(X_train, y_train)

# Predict the values of y given x(from test dataset)
y_pred = linreg.predict(X_test)

# The coefficients
coeff = linreg.coef_
print('Coefficients of model: %.2f' % coeff[0,0])

# The coefficient of determination
r2 = r2_score(y_test, y_pred)
print('Coefficient of determination of model: %.2f' % r2)

# Accuracy Matrix
# The mean squared error
mse = mean_squared_error(y_test, y_pred)
print('Mean squared error: %.2f' % mse)

# The absolute error
abs = mean_absolute_error(y_test, y_pred)
print('Mean absolute error: %.2f' % abs)

# Plot outputs
plt.scatter(X_test, y_test)
plt.plot(X_test, y_pred, color='green', linewidth=3)
plt.title('X against y') #set title
plt.xlabel('X', fontsize = 12) #set x-axis label
plt.ylabel('y', fontsize = 12) #set y-axis label
plt.legend(bbox_to_anchor=(1.28,1), labels=['model', 'test data']) #set legend
plt.show()
